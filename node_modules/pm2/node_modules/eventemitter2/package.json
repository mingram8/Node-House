{
  "name": "eventemitter2",
  "version": "1.0.5",
  "description": "A Node.js event emitter implementation with namespaces, wildcards, TTL and browser support.",
  "keywords": [
    "event",
    "events",
    "emitter",
    "eventemitter"
  ],
  "author": {
    "name": "hij1nx",
    "email": "paolo@async.ly"
  },
  "contributors": [
    {
      "name": "Eric Elliott"
    },
    {
      "name": "Charlie Robbins",
      "email": "charlie@nodejitsu.com"
    },
    {
      "name": "Jameson Lee",
      "email": "jameson@nodejitsu.com"
    },
    {
      "name": "Jeroen van Duffelen",
      "email": "jvduf@nodejitsu.com"
    },
    {
      "name": "Fedor Indutny",
      "email": "fedor.indutny@gmail.com"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/hij1nx/EventEmitter2.git"
  },
  "devDependencies": {
    "nodeunit": "*",
    "benchmark": ">= 0.2.2"
  },
  "main": "./lib/eventemitter2.js",
  "scripts": {
    "test": "nodeunit test/simple/ && nodeunit test/wildcardEvents/",
    "benchmark": "node test/perf/benchmark.js"
  },
  "files": [
    "lib/eventemitter2.js",
    "index.js",
    "eventemitter2.d.ts"
  ],
  "typings": "./eventemitter2.d.ts",
  "typescript": {
    "definition": "./eventemitter2.d.ts"
  },
  "readme": "[![build-status](https://www.codeship.io/projects/3ad58940-4c7d-0131-15d5-5a8cd3f550f8/status)](https://www.codeship.io/projects/11259)\r\n\r\n[![NPM version](https://badge.fury.io/js/eventemitter2.png)](http://badge.fury.io/js/eventemitter2)\r\n[![Bower version](https://badge.fury.io/bo/eventemitter2.png)](http://badge.fury.io/bo/eventemitter2)\r\n\r\n# SYNOPSIS\r\n\r\nEventEmitter2 is an implementation of the EventEmitter module found in Node.js. In addition to having a better benchmark performance than EventEmitter and being browser-compatible, it also extends the interface of EventEmitter with additional non-breaking features.\r\n\r\n# DESCRIPTION\r\n\r\n### FEATURES\r\n - Namespaces/Wildcards.\r\n - Times To Listen (TTL), extends the `once` concept with `many`.\r\n - Browser environment compatibility.\r\n - Demonstrates good performance in benchmarks\r\n\r\n```\r\nEventEmitterHeatUp x 3,728,965 ops/sec \\302\\2610.68% (60 runs sampled)\r\nEventEmitter x 2,822,904 ops/sec \\302\\2610.74% (63 runs sampled)\r\nEventEmitter2 x 7,251,227 ops/sec \\302\\2610.55% (58 runs sampled)\r\nEventEmitter2 (wild) x 3,220,268 ops/sec \\302\\2610.44% (65 runs sampled)\r\nFastest is EventEmitter2\r\n```\r\n\r\n### Differences (Non-breaking, compatible with existing EventEmitter)\r\n\r\n - The EventEmitter2 constructor takes an optional configuration object.\r\n \r\n```javascript\r\n    var EventEmitter2 = require('eventemitter2').EventEmitter2;\r\n    var server = new EventEmitter2({\r\n\r\n      //\r\n      // set this to `true` to use wildcards. It defaults to `false`.\r\n      //\r\n      wildcard: true,\r\n\r\n      //\r\n      // the delimiter used to segment namespaces, defaults to `.`.\r\n      //\r\n      delimiter: '::', \r\n      \r\n      //\r\n      // set this to `true` if you want to emit the newListener event. The default value is `true`.\r\n      //\r\n      newListener: false, \r\n\r\n      //\r\n      // the maximum amount of listeners that can be assigned to an event, default 10.\r\n      //\r\n      maxListeners: 20\r\n    });\r\n```\r\n\r\n - Getting the actual event that fired.\r\n\r\n```javascript\r\n    server.on('foo.*', function(value1, value2) {\r\n      console.log(this.event, value1, value2);\r\n    });\r\n```\r\n\r\n - Fire an event N times and then remove it, an extension of the `once` concept.\r\n\r\n```javascript\r\n    server.many('foo', 4, function() {\r\n      console.log('hello');\r\n    });\r\n```\r\n\r\n - Pass in a namespaced event as an array rather than a delimited string.\r\n\r\n```javascript\r\n    server.many(['foo', 'bar', 'bazz'], function() {\r\n      console.log('hello');\r\n    });\r\n```\r\n\r\n\r\n# API\r\n\r\nWhen an `EventEmitter` instance experiences an error, the typical action is\r\nto emit an `error` event. Error events are treated as a special case.\r\nIf there is no listener for it, then the default action is to print a stack\r\ntrace and exit the program.\r\n\r\nAll EventEmitters emit the event `newListener` when new listeners are\r\nadded. EventEmitters also emit the event `removeListener` when listeners are\r\nremoved, and `removeListenerAny` when listeners added through `onAny` are\r\nremoved.\r\n\r\n\r\n**Namespaces** with **Wildcards**\r\nTo use namespaces/wildcards, pass the `wildcard` option into the EventEmitter \r\nconstructor. When namespaces/wildcards are enabled, events can either be \r\nstrings (`foo.bar`) separated by a delimiter or arrays (`['foo', 'bar']`). The \r\ndelimiter is also configurable as a constructor option.\r\n\r\nAn event name passed to any event emitter method can contain a wild card (the \r\n`*` character). If the event name is a string, a wildcard may appear as `foo.*`. \r\nIf the event name is an array, the wildcard may appear as `['foo', '*']`.\r\n\r\nIf either of the above described events were passed to the `on` method, \r\nsubsequent emits such as the following would be observed...\r\n\r\n```javascript\r\n   emitter.emit('foo.bazz');\r\n   emitter.emit(['foo', 'bar']);\r\n```\r\n\r\n# Multi-level Wildcards\r\nA double wildcard (the string `**`) matches any number of levels (zero or more) of events. So if for example `'foo.**'` is passed to the `on` method, the following events would be observed:\r\n\r\n````javascript\r\n    emitter.emit('foo');\r\n    emitter.emit('foo.bar');\r\n    emitter.emit('foo.bar.baz');\r\n````\r\n\r\nOn the other hand, if the single-wildcard event name was passed to the on method, the callback would only observe the second of these events.\r\n\r\n\r\n### emitter.addListener(event, listener)\r\n### emitter.on(event, listener)\r\n\r\nAdds a listener to the end of the listeners array for the specified event.\r\n\r\n```javascript\r\n    server.on('data', function(value1, value2, value3, ...) {\r\n      console.log('The event was raised!');\r\n    });\r\n```\r\n\r\n```javascript\r\n    server.on('data', function(value) {\r\n      console.log('The event was raised!');\r\n    });\r\n```\r\n\r\n### emitter.onAny(listener)\r\n\r\nAdds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the callback.\r\n\r\n```javascript\r\n    server.onAny(function(event, value) {\r\n      console.log('All events trigger this.');\r\n    });\r\n```\r\n\r\n### emitter.offAny(listener)\r\n\r\nRemoves the listener that will be fired when any event is emitted.\r\n\r\n```javascript\r\n    server.offAny(function(value) {\r\n      console.log('The event was raised!');\r\n    });\r\n```\r\n\r\n#### emitter.once(event, listener)\r\n\r\nAdds a **one time** listener for the event. The listener is invoked \r\nonly the first time the event is fired, after which it is removed.\r\n\r\n```javascript\r\n    server.once('get', function (value) {\r\n      console.log('Ah, we have our first value!');\r\n    });\r\n```\r\n\r\n### emitter.many(event, timesToListen, listener)\r\n\r\nAdds a listener that will execute **n times** for the event before being\r\nremoved. The listener is invoked only the first **n times** the event is \r\nfired, after which it is removed.\r\n\r\n```javascript\r\n    server.many('get', 4, function (value) {\r\n      console.log('This event will be listened to exactly four times.');\r\n    });\r\n```\r\n\r\n\r\n### emitter.removeListener(event, listener)\r\n### emitter.off(event, listener)\r\n\r\nRemove a listener from the listener array for the specified event. \r\n**Caution**: Calling this method changes the array indices in the listener array behind the listener.\r\n\r\n```javascript\r\n    var callback = function(value) {\r\n      console.log('someone connected!');\r\n    };\r\n    server.on('get', callback);\r\n    // ...\r\n    server.removeListener('get', callback);\r\n```\r\n\r\n\r\n### emitter.removeAllListeners([event])\r\n\r\nRemoves all listeners, or those of the specified event.\r\n\r\n\r\n### emitter.setMaxListeners(n)\r\n\r\nBy default EventEmitters will print a warning if more than 10 listeners \r\nare added to it. This is a useful default which helps finding memory leaks. \r\nObviously not all Emitters should be limited to 10. This function allows \r\nthat to be increased. Set to zero for unlimited.\r\n\r\n\r\n### emitter.listeners(event)\r\n\r\nReturns an array of listeners for the specified event. This array can be \r\nmanipulated, e.g. to remove listeners.\r\n\r\n```javascript\r\n    server.on('get', function(value) {\r\n      console.log('someone connected!');\r\n    });\r\n    console.log(server.listeners('get')); // [ [Function] ]\r\n```\r\n\r\n### emitter.listenersAny()\r\n\r\nReturns an array of listeners that are listening for any event that is \r\nspecified. This array can be manipulated, e.g. to remove listeners.\r\n\r\n```javascript\r\n    server.onAny(function(value) {\r\n      console.log('someone connected!');\r\n    });\r\n    console.log(server.listenersAny()[0]); // [ [Function] ]\r\n```\r\n\r\n### emitter.emit(event, [arg1], [arg2], [...])\r\n\r\nExecute each of the listeners that may be listening for the specified event \r\nname in order with the list of arguments.\r\n\r\n### emitter.emitAsync(event, [arg1], [arg2], [...])\r\n\r\nReturn the results of the listeners via [Promise.all](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).\r\nOnly this method doesn't work [IE](http://caniuse.com/#search=promise).\r\n\r\n```javascript\r\n    emitter.on('get',function(i) {\r\n      return new Promise(function(resolve){\r\n        setTimeout(function(){\r\n          resolve(i+3);\r\n        },50);\r\n      });\r\n    });\r\n    emitter.on('get',function(i) {\r\n      return new Promise(function(resolve){\r\n        resolve(i+2)\r\n      });\r\n    });\r\n    emitter.on('get',function(i) {\r\n      return Promise.resolve(i+1);\r\n    });\r\n    emitter.on('get',function(i) {\r\n      return i+0;\r\n    });\r\n    emitter.on('get',function(i) {\r\n      // noop\r\n    });\r\n    \r\n    emitter.emitAsync('get',0)\r\n    .then(function(results){\r\n      console.log(results); // [3,2,1,0,undefined]\r\n    });\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hij1nx/EventEmitter2/issues"
  },
  "_id": "eventemitter2@1.0.5",
  "dist": {
    "shasum": "0966e1bca698bce29175dd107d8e5e676d384439"
  },
  "_from": "https://registry.npmjs.org/eventemitter2/-/eventemitter2-1.0.5.tgz",
  "_resolved": "https://registry.npmjs.org/eventemitter2/-/eventemitter2-1.0.5.tgz"
}
